-- program memory file
DEPTH = 256;
WIDTH = 16;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 1111100001110000; -- MOVEI A C Execute RA <= 14
1 : 1111100000101001; -- MOVEI A C Execute RB <= 5
2 : 1111010100000100; -- MOVE A C Execute RE <= SP
3 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
4 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
5 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
6 : 0011010000111101; -- CALL L Call the routine at address 61
7 : 1111100000010000; -- MOVEI A C Execute RA <= 2
8 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
9 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
10 : 0110010000000000; -- OPORT S Send register RC to the output port
11 : 0110010000000000; -- OPORT S Send register RC to the output port
12 : 0110010000000000; -- OPORT S Send register RC to the output port
13 : 0110010000000000; -- OPORT S Send register RC to the output port
14 : 0110010000000000; -- OPORT S Send register RC to the output port
15 : 0110010000000000; -- OPORT S Send register RC to the output port
16 : 0110010000000000; -- OPORT S Send register RC to the output port
17 : 0110010000000000; -- OPORT S Send register RC to the output port
18 : 0110010000000000; -- OPORT S Send register RC to the output port
19 : 1111100001110000; -- MOVEI A C Execute RA <= 14
20 : 1111100000101001; -- MOVEI A C Execute RB <= 5
21 : 1111010100000100; -- MOVE A C Execute RE <= SP
22 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
23 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
24 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
25 : 0011010001001111; -- CALL L Call the routine at address 79
26 : 1111100000010000; -- MOVEI A C Execute RA <= 2
27 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
28 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
29 : 0110010000000000; -- OPORT S Send register RC to the output port
30 : 0110010000000000; -- OPORT S Send register RC to the output port
31 : 0110010000000000; -- OPORT S Send register RC to the output port
32 : 0110010000000000; -- OPORT S Send register RC to the output port
33 : 0110010000000000; -- OPORT S Send register RC to the output port
34 : 0110010000000000; -- OPORT S Send register RC to the output port
35 : 0110010000000000; -- OPORT S Send register RC to the output port
36 : 0110010000000000; -- OPORT S Send register RC to the output port
37 : 0110010000000000; -- OPORT S Send register RC to the output port
38 : 0110010000000000; -- OPORT S Send register RC to the output port
39 : 1111100001110000; -- MOVEI A C Execute RA <= 14
40 : 1111100000101001; -- MOVEI A C Execute RB <= 5
41 : 1111010100000100; -- MOVE A C Execute RE <= SP
42 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
43 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
44 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
45 : 0011010001100100; -- CALL L Call the routine at address 100
46 : 1111100000010000; -- MOVEI A C Execute RA <= 2
47 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
48 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
49 : 0110010000000000; -- OPORT S Send register RC to the output port
50 : 0110010000000000; -- OPORT S Send register RC to the output port
51 : 0110010000000000; -- OPORT S Send register RC to the output port
52 : 0110010000000000; -- OPORT S Send register RC to the output port
53 : 0110010000000000; -- OPORT S Send register RC to the output port
54 : 0110010000000000; -- OPORT S Send register RC to the output port
55 : 0110010000000000; -- OPORT S Send register RC to the output port
56 : 0110010000000000; -- OPORT S Send register RC to the output port
57 : 0110010000000000; -- OPORT S Send register RC to the output port
58 : 0110010000000000; -- OPORT S Send register RC to the output port
59 : 0110010000000000; -- OPORT S Send register RC to the output port
60 : 0010000000000000; -- BRA L Unconditional branch to address 0
61 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
62 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
63 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
64 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
65 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
66 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
67 : 0011000001001011; -- BRAZ L Branch to address 75 if the CR zero flag is set
68 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
69 : 0011000001001011; -- BRAZ L Branch to address 75 if the CR zero flag is set
70 : 1000010000000010; -- ADD A B C Execute RC <= RC + RA
71 : 0011000101001011; -- BRAO L Branch to address 75 if the CR overflow flag is set
72 : 1000001111000001; -- ADD A B C Execute RB <= RB + ONES
73 : 0011000001001011; -- BRAZ L Branch to address 75 if the CR zero flag is set
74 : 0010000001000110; -- BRA L Unconditional branch to address 70
75 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
76 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
77 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
78 : 0011100000000000; -- RETURN return from a routine
79 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
80 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
81 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
82 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
83 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
84 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
85 : 0011000001100000; -- BRAZ L Branch to address 96 if the CR zero flag is set
86 : 0011001001100000; -- BRAN L Branch to address 96 if the CR negative flag is set
87 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
88 : 0011000001100000; -- BRAZ L Branch to address 96 if the CR zero flag is set
89 : 0011001001100000; -- BRAN L Branch to address 96 if the CR negative flag is set
90 : 1111000000000010; -- MOVE A C Execute RC <= RA
91 : 1001010001000010; -- SUB A B C Execute RC <= RC - RB
92 : 0011001001011110; -- BRAN L Branch to address 94 if the CR negative flag is set
93 : 0010000001011011; -- BRA L Unconditional branch to address 91
94 : 1000010001000010; -- ADD A B C Execute RC <= RC + RB
95 : 0010000001100000; -- BRA L Unconditional branch to address 96
96 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
97 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
98 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
99 : 0011100000000000; -- RETURN return from a routine
100 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
101 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
102 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
103 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
104 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
105 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
106 : 0011000001110011; -- BRAZ L Branch to address 115 if the CR zero flag is set
107 : 0011001001110011; -- BRAN L Branch to address 115 if the CR negative flag is set
108 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
109 : 0011000001110011; -- BRAZ L Branch to address 115 if the CR zero flag is set
110 : 0011001001110011; -- BRAN L Branch to address 115 if the CR negative flag is set
111 : 1001000001000000; -- SUB A B C Execute RA <= RA - RB
112 : 0011001001110011; -- BRAN L Branch to address 115 if the CR negative flag is set
113 : 1001010111000010; -- SUB A B C Execute RC <= RC - ONES
114 : 0010000001101111; -- BRA L Unconditional branch to address 111
115 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
116 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
117 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
118 : 0011100000000000; -- RETURN return from a routine
[119..255] : 0011110000000000; -- HALT execute the halt/exit instructionComment
END
-- program memory file
DEPTH = 256;
WIDTH = 16;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0 : 1111100001110000; -- MOVEI A C Execute RA <= 14
1 : 1111100000101001; -- MOVEI A C Execute RB <= 5
2 : 1111010100000100; -- MOVE A C Execute RE <= SP
3 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
4 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
5 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
6 : 0011010000111001; -- CALL L Call the routine at address 57
7 : 1111100000010000; -- MOVEI A C Execute RA <= 2
8 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
9 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
10 : 0110010000000000; -- OPORT S Send register RC to the output port
11 : 0110010000000000; -- OPORT S Send register RC to the output port
12 : 0110010000000000; -- OPORT S Send register RC to the output port
13 : 0110010000000000; -- OPORT S Send register RC to the output port
14 : 0110010000000000; -- OPORT S Send register RC to the output port
15 : 0110010000000000; -- OPORT S Send register RC to the output port
16 : 0110010000000000; -- OPORT S Send register RC to the output port
17 : 0110010000000000; -- OPORT S Send register RC to the output port
18 : 0110010000000000; -- OPORT S Send register RC to the output port
19 : 1111010100000100; -- MOVE A C Execute RE <= SP
20 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
21 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
22 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
23 : 0011010001001011; -- CALL L Call the routine at address 75
24 : 1111100000010000; -- MOVEI A C Execute RA <= 2
25 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
26 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
27 : 0110010000000000; -- OPORT S Send register RC to the output port
28 : 0110010000000000; -- OPORT S Send register RC to the output port
29 : 0110010000000000; -- OPORT S Send register RC to the output port
30 : 0110010000000000; -- OPORT S Send register RC to the output port
31 : 0110010000000000; -- OPORT S Send register RC to the output port
32 : 0110010000000000; -- OPORT S Send register RC to the output port
33 : 0110010000000000; -- OPORT S Send register RC to the output port
34 : 0110010000000000; -- OPORT S Send register RC to the output port
35 : 0110010000000000; -- OPORT S Send register RC to the output port
36 : 0110010000000000; -- OPORT S Send register RC to the output port
37 : 1111010100000100; -- MOVE A C Execute RE <= SP
38 : 1001101111000101; -- SUB A B C Execute SP <= SP - ONES
39 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
40 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
41 : 0011010001100000; -- CALL L Call the routine at address 96
42 : 1111100000010000; -- MOVEI A C Execute RA <= 2
43 : 1001101000000101; -- SUB A B C Execute SP <= SP - RA
44 : 0101010000000000; -- POP S Decrement SP and put the top value on the stack into register RC
45 : 0110010000000000; -- OPORT S Send register RC to the output port
46 : 0110010000000000; -- OPORT S Send register RC to the output port
47 : 0110010000000000; -- OPORT S Send register RC to the output port
48 : 0110010000000000; -- OPORT S Send register RC to the output port
49 : 0110010000000000; -- OPORT S Send register RC to the output port
50 : 0110010000000000; -- OPORT S Send register RC to the output port
51 : 0110010000000000; -- OPORT S Send register RC to the output port
52 : 0110010000000000; -- OPORT S Send register RC to the output port
53 : 0110010000000000; -- OPORT S Send register RC to the output port
54 : 0110010000000000; -- OPORT S Send register RC to the output port
55 : 0110010000000000; -- OPORT S Send register RC to the output port
56 : 0010000000000000; -- BRA L Unconditional branch to address 0
57 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
58 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
59 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
60 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
61 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
62 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
63 : 0011000001000111; -- BRAZ L Branch to address 71 if the CR zero flag is set
64 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
65 : 0011000001000111; -- BRAZ L Branch to address 71 if the CR zero flag is set
66 : 1000010000000010; -- ADD A B C Execute RC <= RC + RA
67 : 0011000101000111; -- BRAO L Branch to address 71 if the CR overflow flag is set
68 : 1000001111000001; -- ADD A B C Execute RB <= RB + ONES
69 : 0011000001000111; -- BRAZ L Branch to address 71 if the CR zero flag is set
70 : 0010000001000010; -- BRA L Unconditional branch to address 66
71 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
72 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
73 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
74 : 0011100000000000; -- RETURN return from a routine
75 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
76 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
77 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
78 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
79 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
80 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
81 : 0011000001011100; -- BRAZ L Branch to address 92 if the CR zero flag is set
82 : 0011001001011100; -- BRAN L Branch to address 92 if the CR negative flag is set
83 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
84 : 0011000001011100; -- BRAZ L Branch to address 92 if the CR zero flag is set
85 : 0011001001011100; -- BRAN L Branch to address 92 if the CR negative flag is set
86 : 1111000000000010; -- MOVE A C Execute RC <= RA
87 : 1001010001000010; -- SUB A B C Execute RC <= RC - RB
88 : 0011001001011010; -- BRAN L Branch to address 90 if the CR negative flag is set
89 : 0010000001010111; -- BRA L Unconditional branch to address 87
90 : 1000010001000010; -- ADD A B C Execute RC <= RC + RB
91 : 0010000001011100; -- BRA L Unconditional branch to address 92
92 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
93 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
94 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
95 : 0011100000000000; -- RETURN return from a routine
96 : 0100000000000000; -- PUSH S Push register RA onto the stack and increment SP
97 : 0100001000000000; -- PUSH S Push register RB onto the stack and increment SP
98 : 0000100000000001; -- LOADA D A Load from address [AA + RE] to register RA
99 : 0000100100000010; -- LOADA D A Load from address [AB + RE] to register RB
100 : 1001010010000010; -- SUB A B C Execute RC <= RC - RC
101 : 1000110000000000; -- ADD A B C Execute RA <= ZEROS + RA
102 : 0011000001101111; -- BRAZ L Branch to address 111 if the CR zero flag is set
103 : 0011001001101111; -- BRAN L Branch to address 111 if the CR negative flag is set
104 : 1000110001000001; -- ADD A B C Execute RB <= ZEROS + RB
105 : 0011000001101111; -- BRAZ L Branch to address 111 if the CR zero flag is set
106 : 0011001001101111; -- BRAN L Branch to address 111 if the CR negative flag is set
107 : 1001000001000000; -- SUB A B C Execute RA <= RA - RB
108 : 0011001001101111; -- BRAN L Branch to address 111 if the CR negative flag is set
109 : 1001010111000010; -- SUB A B C Execute RC <= RC - ONES
110 : 0010000001101011; -- BRA L Unconditional branch to address 107
111 : 0101001000000000; -- POP S Decrement SP and put the top value on the stack into register RB
112 : 0101000000000000; -- POP S Decrement SP and put the top value on the stack into register RA
113 : 0001101000000000; -- STOREA S A Store the value in register RC to address [0 + RE]
114 : 0011100000000000; -- RETURN return from a routine
[115..255] : 0011110000000000; -- HALT execute the halt/exit instructionComment
END
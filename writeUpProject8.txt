h1. CPU


h3. Write Up


h5. Include a description of the design of your assembler

h5. Demonstrate that the assembler is generating correct code

h5. Describe the programs you implemented. Demonstrate them working in simulation or on the board.

Our generated Fibonacci program first computes all the numbers and preserves them on the stack, then prints them repeatedly.
Here is the video of the generated Fibonacci program running with the hex displays:

[fibHex|^20140420_174537.mp4]

Our generated factorial has two versions, one with and one without the stack.
Both output the factorial result on the hex display.
The stack one also outputs all the results at the end in descending order, alternating between n and n!

h3. Extensions:

h5. Demonstrate your programs, generated by your assembler, on the board and set up the output port so it writes to the four 7-segment displays.

We downloaded the CPU to the board and demonstrated it's functionality with our Fibonacci sequence program and our factorial program.

h5. Make your assembler more intelligent so that it can catch errors, tell the user what the error is, and possibly suggest corrections.

A lot of error handling in AssemblyCompiler.py, except for parameter passing, which was hard enough without checking for errors

h5. Extend the instruction set in some way that makes writing a program easier. For example, set up a method that can handle functions with arguments.

Four places in getMachineInstruction needed to be modified and pass1 needed to do more work. All four have paramExt comments as labels in source code

h5. Create some test programs that evaluate all of the CPUs capabilities.

h3. Code Submitted:

We submitted cpu code for board use and for simulation use in separate files. Copy into cpu.vhd for testing respectively.
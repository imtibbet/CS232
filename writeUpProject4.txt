Writeup

Create a wiki page with your writeup. For each task, write a short description of the task, in your own words.

Include a description of your top-level design.


Include the two programs you wrote using the simple instruction set.
I can put the source code in when we transfer this to the wiki.

Include a picture of your circuit in simulation.
Done, already in the wiki.

Describe the hardware testing you undertook to prove the circuit works.
We ran it and verified that the program described by the lightrom corresponded to the lights on the board for the lights, the IR and the PC.

Include a description, and pictures, of any extensions.

Extensions

Make longer programs.
Add instructions to the system. Make branch instructions, for example.
Add a hold/free button to the display.
Add a button that lets you speed up or slow down the display.
Be creative.

Project 4: Programmable Lights

We created a programmable light display using VHDL that can use up to 16 instruction codes and 64 total instructions. It uses the 8 green LED lights as the display and the 10 red LED lights to show what the state machine driving the programmable display is doing. The state machine is our top level design with an instance of lightrom, which specifies the program that will run as the top level increments. We decided that we wanted to display some simple scrolling morse code snippets so we needed to lengthen the number of instructions and add a shift left and fill in the space with a 1 rather than a zero. We then translated “I Love CS” and “CS232 into morse code and wrote the following sets of instructions to display them.

Hardware Testing:
We ran it and verified that the program described by the lightrom corresponded to the lights on the board for the lights, the IR and the PC.

Extensions:
We created a hold/free switch by adding a simple flag at the top of the program run code that stops it from running while the hold switch is on. 
We also created a button that changes the speed at which the program runs by cycling through the top 10 bits of the counter used to slow the clock. The highest bit is the slowest possible speed and the lowest selectable bit is the highest possible speed. By implementing the speed button in it’s own process we were able to use the falling_edge command so it only changes the bit by one each time pushed. 
In order to display morse code of relevant length we extended the number of instructions to 2^6 (6 address bits) and added the required shift left and concatenate with a one instruction by extending the number of possible instructions to 2^4.
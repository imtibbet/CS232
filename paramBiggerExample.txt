test:
movei 14 RA
movei 5 RB
call mult RC RA RB # multiplies RA and RB and stores result in RC
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
oport RC # should be 70
call mod RC RA RB # 
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
oport RC # should be 4
call intDiv RC RA RB # 
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
oport RC # should be 2
bra test

mult: AA AB # multiplication label with two arguments
	push RA
	push RB
	loada RA AA
	loada RB AB # get the parameters into registers
	sub RC RC RC # clear register for building result
	add ZEROS RA RA
	braz multDone # multiplication with zero is zero
	add ZEROS RB RB
	braz multDone # multiplication with zero is zero
	addLoop:
		add RC RA RC
		brao multDone
		add RB ONES RB
		braz multDone
		bra addLoop
	multDone:
	pop RB
	pop RA
	return RC
	
mod: AA AB # modulus label with two arguments both positive and non zero, otherwise returns zero
	push RA
	push RB
	loada RA AA
	loada RB AB # get the parameters into registers
	sub RC RC RC # clear register for building result
	add ZEROS RA RA
	braz modDone # zero modulus anything is zero (not really but I can pretend)
	bran modDone # modulus with negative is zero (not really but I can pretend)
	add ZEROS RB RB
	braz modDone # modulus with zero is zero
	bran modDone # modulus with negative is zero (not really but I can pretend)
	move RA RC
	modLoop:
		sub RC RB RC
		bran preModDone
		bra modLoop
	preModDone:
		add RC RB RC# result is remainder, positive
		bra modDone
	modDone:
	pop RB
	pop RA
	return RC
		
intDiv: AA AB # integer division label with two arguments, both positive non zero otherwise returns zero
	push RA
	push RB
	loada RA AA
	loada RB AB # get the parameters into registers
	sub RC RC RC # clear register for building result
	add ZEROS RA RA
	braz intDivDone # zero divided by anything is zero
	bran intDivDone # divide with negative is zero (not really but I can pretend)
	add ZEROS RB RB
	braz intDivDone # divide by zero is zero (not really but I can pretend)
	bran intDivDone # divide with negative is zero (not really but I can pretend)
	intDivLoop:
		sub RA RB RA
		bran intDivDone
		sub RC ONES RC # increment result
		bra intDivLoop
	intDivDone:
	pop RB
	pop RA
	return RC